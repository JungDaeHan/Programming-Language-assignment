(* datatypes *)

datatype expr = NUM of int                   
| PLUS of expr * expr                   
| MINUS of expr * expr ;

datatype formula = TRUE                     
| FALSE                      
| NOT of formula                     
| ANDALSO of formula * formula                     
| ORELSE of formula * formula                     
| IMPLY of formula * formula                     
| LESS of expr * expr;

type name = string;

datatype metro = STATION of name                    
| AREA of name * metro                    
| CONNECT of metro * metro;

datatype 'a lazyList = nullList
| cons of 'a * (unit -> 'a lazyList) ;

(* 1.Simple Eval *)

fun num e =
case e of
NUM i => i
| PLUS(e1,e2) => (num e1) + (num e2)
| MINUS(e1,e2) => (num e1) - (num e2);

fun eval e =
case e of
TRUE => true
| FALSE => false
|NOT e1 => if e1=TRUE then false else true
| ANDALSO(e1,e2) => if (eval e1)=true andalso (eval e2)=true then true else false
| ORELSE(e1,e2) => if (eval e1)=false andalso (eval e2)=false then false else true
| IMPLY(e1,e2) => if (eval e1)=true andalso (eval e2)=false then false else true
| LESS(e1,e2) => if (num e1)>=(num e2) then false else true;

(* 2. Check Metro Map *)

fun extract(xs:string list , x : string)=
if null xs
then []
else if x=hd(xs)
then [] @ extract(tl(xs) ,x)
else hd(xs) :: extract(tl(xs),x);

fun check e =
case e of
STATION i => [i]
| AREA(n1,m1) => extract(check(m1),n1)
| CONNECT(m1,m2) => check(m1)@check(m2);

fun checkMetro(m:metro)=
if check(m) = []
then true
else false;

(* 3.(i) *)

(* seq *)

fun seq(first,last)=
if first=last
then cons(first,fn()=>nullList)
else cons(first,fn() => seq(first+1,last));

(* infSeq *)

fun infSeq(first) =
cons(first,fn()=> infSeq(first+1));

(* firstN *)

fun first_val e =
case e of
nullList => ~1
| cons(a,e) => a;

fun next_lazy e =
case e of
nullList => nullList
| cons(a,f) => f();

fun firstN(lazyListval,n)=
if n=0 then []
else if first_val(lazyListval) = ~1 then []
else first_val(lazyListval) :: firstN(next_lazy(lazyListval),n-1);

(* Nth *)

fun Nth(lazyListVal,n) =
if first_val(lazyListVal) = ~1 andalso n>=1
then NONE
else  if n=1
       then SOME(first_val(lazyListVal))
       else Nth(next_lazy(lazyListVal),n-1);

(* filterMultiples *)

fun filtered_lazy(lazyListVal,n,tmp)=
let val a = first_val(lazyListVal)
in
      if a = ~1
      then nullList
      else    if n*tmp < first_val(lazyListVal)
              then cons(first_val(lazyListVal),fn() => filtered_lazy(next_lazy(lazyListVal),n,tmp+1))
              else    if a mod (n*tmp) = 0
                      then filtered_lazy(next_lazy(lazyListVal),n,tmp+1)
                      else cons(first_val(lazyListVal),fn() => filtered_lazy(next_lazy(lazyListVal),n,tmp))
end;

fun filterMultiples(lazyListVal,n)=
filtered_lazy(lazyListVal,n,1);

(* 3.(ii) *)

fun sieve(lazyListVal,n)=
let val a = filtered_lazy(lazyListVal,n,1)
in
	cons(first_val(lazyListVal), fn() => sieve(a,first_val(a)))
end;

fun primes() =
sieve(infSeq(2),2);

fun make_lazylist_to_list(ll) = 
case ll of
nullList => []
| cons(a, f) => a::make_lazylist_to_list(f())